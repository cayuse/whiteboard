#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var config = require(__dirname + '/config.js')['production'];
var MongoClient = require('mongodb').MongoClient
    , assert = require('assert');
/**
 * Get port from environment and store in Express.
 */


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


/**
 * Starting here is coded added to the default install (except requires)
 **/

/**
 *  Set up mongodb connection
 *  I'm getting a deprication warning, but so far it doesn't save with my "fixes", so leaving it for now
 */
// connect
var dbURL = 'mongodb://'
            + config.database.user + ':'
            + config.database.pass + '@'
            + config.database.host + ':'
            + config.database.port
            + '/admin';

var db = MongoClient.connect(dbURL, function(err) {
    if (err){
        throw err;
    } else {
        console.log("Database Connected");
    }
});

/* messages should be in the following format (probably will get updated)
var msgSchema = {
    userId:   String,
    message:  String,
    created: {type: Date, default: Date.now}
}
*/
function dbInsert(room, msg){
    MongoClient.connect(dbURL, function(err, db) {
        if (err) throw err;
            msg.timestamp = Date();
        db.collection(room).insertOne(msg, function(err, res) {
            if (err) throw err;
            db.close();
        });
    });
}
// Handle a client request to join a room.
io.sockets.on('connection', function (socket) {
    socket.on('join', function (room) {
        var id = this.id;
        MongoClient.connect(dbURL, function(err, db) {
            if (err) throw err;
            var mysort = { _id: 1 };
            db.collection(room.name).find().sort(mysort).toArray(function(err, result) {
                if (err) throw err;
                result.forEach(function(msg) {
                    socket.emit(msg.type, msg);
                });
                db.close();
            });
        });
        //result.foreach(function(msg){
        //    socket.broadcast.to(socketid).emit();
        //})
        socket.join(room.name);
    });
});


// Handle a 'draw message' this is the method that reflects drawing on the screen while the mouse is moving
// and is by far the busiest
io.on('connection', function (socket) {
    socket.on('draw message', function (msg) {
        msg.type = 'draw message';
        msg.user = this.id;
        dbInsert(msg.room, msg);
        socket.broadcast.to(msg.room).emit('draw message', msg);
    });
});

io.on('connection', function (socket) {
    socket.on('mouseup', function (msg) {
        msg.type = 'mouseup';
        msg.user = this.id;
        dbInsert(msg.room, msg);
        socket.broadcast.to(msg.room).emit('mouseup', msg);
    });
});